class Integration {
  static class AsyncBitmapDrawable extends BitmapDrawable {
      private final WeakReference<BitmapDrawableWorkerTask> bitmapWorkerTaskReference;

      public AsyncBitmapDrawable(Resources res, Bitmap bitmap,
                                 BitmapDrawableWorkerTask bitmapWorkerTask) {
          super(res, bitmap);
          bitmapWorkerTaskReference = new WeakReference<BitmapDrawableWorkerTask>(
                  bitmapWorkerTask);
      }

      public BitmapDrawableWorkerTask getBitmapWorkerTask() {
          return bitmapWorkerTaskReference.get();
      }
  }

  private void loadImage(AppItem appItem, ImageView imageView) {
      final String imageKey = appItem.appInfo.packageName;
      final BitmapDrawable bitmap = getBitmapFromMemCache(imageKey);
      if (bitmap != null && !cancelPotentialWork(imageKey,imageView)) {
          imageView.setImageDrawable(bitmap);
      } else {
          loadBitmap(appItem, imageView);
      }
  }
  
  private void loadBitmap(AppItem appItem, ImageView imageView) {
      if (cancelPotentialWork(appItem.appInfo.packageName, imageView)) {
          final BitmapDrawableWorkerTask task = new BitmapDrawableWorkerTask(imageView);
          Bitmap bitmapPlace = BitmapFactory.decodeResource(getResources(),
                  R.drawable.ic_placeholder);
          final AsyncBitmapDrawable asyncDrawable =
                  new AsyncBitmapDrawable(getResources(), bitmapPlace, task);
          imageView.setImageDrawable(asyncDrawable);
          task.execute(appItem);
      }
  }
  
  public static boolean cancelPotentialWork(String pckName, ImageView imageView) {
        final BitmapDrawableWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);
        if (bitmapWorkerTask != null) {
            final String bitmapData = bitmapWorkerTask.appPckName;
            if (!bitmapData.equals(pckName)) {
                // Cancel previous task
                bitmapWorkerTask.cancel(true);
            } else {
                return false;
            }
        }
        return true;
    }

    private static BitmapDrawableWorkerTask getBitmapWorkerTask(ImageView imageView) {
        if (imageView != null) {
            final Drawable drawable = imageView.getDrawable();
            if (drawable instanceof AsyncBitmapDrawable) {
                final AsyncBitmapDrawable asyncDrawable = (AsyncBitmapDrawable) drawable;
                return asyncDrawable.getBitmapWorkerTask();
            }
        }
        return null;
    }
    
    private LruCache<String, BitmapDrawable> mMemoryCache;
    mMemoryCache = new LruCache<String, BitmapDrawable>(DEFAULT_LRU_CACHE_SIZE) {
        @Override
        protected int sizeOf(String key, BitmapDrawable bitmap) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                return bitmap.getBitmap().getAllocationByteCount();
            } else {
                return bitmap.getBitmap().getByteCount();
            }
        }
    };
    
    private void addBitmapToMemoryCache(String key, BitmapDrawable bitmap) {
        if (getBitmapFromMemCache(key) == null) {
            if (BitmapDrawableExt.class.isInstance(bitmap)) {
                // The removed entry is a recycling drawable, so notify it
                // that it has been added into the memory cache
                ((BitmapDrawableExt) bitmap).setIsCached(true);
            }
            mMemoryCache.put(key, bitmap);
        }
    }

    private BitmapDrawable getBitmapFromMemCache(String key) {
        return mMemoryCache.get(key);
    }
}
